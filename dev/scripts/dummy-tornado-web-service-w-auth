#! /usr/bin/env python

__author__ = "Joel Dubowy"


import logging
import os
import sys

import tornado.ioloop
import tornado.web
from afscripting import args as scripting_args

root_dir = os.path.abspath(os.path.join(sys.path[0], '../../'))
sys.path.insert(0, root_dir)

OPTIONAL_ARGS = [
    {
        'short': '-p',
        'long': '--port',
        'help': 'run the server listening on speciied port; default 8889',
        'default': 8882
    },
    {
        'short': '-d',
        'long': '--debug',
        'help': 'run the server in debug mode (with auto-reloading of code, etc.)',
        'action': "store_true",
        'default': False
    }

]

# Note: the trailing space seems to be the only way to add an extra trailing line
EPILOG_STR = """
Examples

    $ ./dev/scripts/dummy-tornado-web-service-w-auth
    $ ./dev/scripts/dummy-tornado-web-service-w-auth -d --log-level=DEBUG

  GET will work:

    $ curl http://localhost:8882/

  But POST will fail:

    $ curl http://localhost:8882/ -X POST

  POST will succeed if the request is signed (as will GET):

    $ ./bin/sign-request --log-level=debug -u http://localhost:8882/ \\
            -k sdf -s e80556c6-70d8-11e6-a3ff-3c15c2c6639e -X POST
    $ ./bin/sign-request --log-level=debug -u http://localhost:8882/ \\
            -k sdf -s e80556c6-70d8-11e6-a3ff-3c15c2c6639e -X GET
 """

DEFAULT_LOG_FORMAT = "%(asctime)s %(name)s %(levelname)s %(filename)s#%(funcName)s: %(message)s"
def configure_logging(log_level_str, log_file, log_format):
    log_level = getattr(logging, log_level_str)
    logging.basicConfig(level=log_level, format=log_format)

    log_file = log_file
    if log_file:
        fh = logging.FileHandler(log_file)
        fh.setFormatter(logging.Formatter(log_format))
        logging.getLogger().addHandler(fh)

def main(port, log_level_str, log_file, log_format, debug):
    log_level_str = log_level_str or 'WARNING'
    log_format = log_format or DEFAULT_LOG_FORMAT
    configure_logging(log_level_str, log_file, log_format)

    # delayed import so that logging is configured first
    from afweb import auth

    class AuthBaseClass(tornado.web.RequestHandler):

        async def _look_up_secret(self, request_args):
            key = self.get_query_arguments('_k')
            if not key or len(key) != 1:
                raise tornado.web.HTTPError(400,
                "Specify '_k' in the query string")
            # TODO: actually look it up
            return 'e80556c6-70d8-11e6-a3ff-3c15c2c6639e'

    class Ping(AuthBaseClass,
            metaclass=auth.TornadoWebRequestAuthMetaClass):

        AUTH_EXCLUDED_METHODS = ['get']

        def get(self):
            # TODO: return anything else?
            self.write({"msg": "pong"})

        def post(self):
            # TODO: return anything else?
            self.write({"msg": "pong"})


    routes = [
        (r".*", Ping)
    ]

    application = tornado.web.Application(routes, debug=debug)

    logging.info(' * Debug mode: {}'.format(debug))
    logging.info(' * Port: {}'.format(port))

    application.listen(port)
    tornado.ioloop.IOLoop.current().start()

if __name__ == "__main__":
    parser = scripting_args.ArgumentParser()
    parser.epilog = EPILOG_STR
    parser.formatter_class = scripting_args.RawTextHelpFormatter
    scripting_args.add_arguments(parser, OPTIONAL_ARGS)
    # Use afscripting to add logging options to the parser object,
    # but we'll configure logging oureselves in app.main
    scripting_args.add_logging_options(parser)
    args = parser.parse_args()
    main(args.port, args.log_level, args.log_file,
        args.log_message_format, args.debug)
